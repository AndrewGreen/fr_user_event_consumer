#!/usr/bin/python3

import argparse

from fr_user_event_consumer import config, setup_logging
from fr_user_event_consumer.central_notice_consumer_controller import CentralNoticeConsumerController

# Entry point
if __name__ == '__main__':

    # Set up command-line arguments
    parser = argparse.ArgumentParser(
        description =
            """Read CentralNotice event log files, aggregate and store in database.
            Note: log filenames must be globally unique across all logs consumed by
            fr_user_event_consumer scripts. Regardless of the options selected, events
            will only be consumed from files that have not been marked as already
            processed.
            """
    )

    parser.add_argument(
        '-d',
        '--directory',
        help =
            """Directory to read log files from. Files in sub-directories will also be
            consumed. (Defaults to the directory set in the configuration file.)"""
    )

    parser.add_argument(
        '--file-glob',
        help =
            """Filename or glob to select log file(s) with events to consume. If not
            specified, defaults to central_notice_filename_glob set in the configuration
            file. Filenames ending in '.gz' are assumed to be compressed with gzip.""",
        dest = 'file_glob'
    )

    since_grp = parser.add_mutually_exclusive_group()

    since_grp.add_argument(
        '--from-latest-consumed',
        help =
            """Process files for times from the most recent events consumed. May not be
            used with the --from option.""",
        action = 'store_true',
        dest = 'from_latest'
    )

    since_grp.add_argument(
        '--from',
        help =
            """Process files with a timestamp equal to or later than this timestamp
            (in Ymd-HMS format). May not be used with the -s option.""",
        dest = 'from_timestamp'
    )

    parser.add_argument(
        '--to',
        help =
            """Process files with a timestamp equal to or earlier than this timestamp
            (in Ymd-HMS format).""",
        dest = 'to_timestamp'
    )

    parser.add_argument(
        '-c',
        '--config',
        help =
            """Configuration file to use. (Without this option, the script looks for a
            configuraiton file in the working directory and in
            /etc/fr_user_event_consumer/.)"""
    )

    parser.add_argument(
        '--debug',
        help = 'Output debugging info to stderr.',
        action = 'store_true'
    )

    parser.add_argument(
        '--dry-run',
        help =
            """Read files and events, but do not write any data to the database. Instead,
            output to stdout the SQL that would be executed to write the data.""",
        action = 'store_true'
    )

    args = parser.parse_args()

    config.filename = args.config # None if the command-line option is not set
    cfg = config.get()

    setup_logging( args.debug )

    controller = CentralNoticeConsumerController(
        timestamp_pattern = cfg[ 'timestamp_regex' ],
        sample_rate_pattern = cfg[ 'sample_rate_regex' ],
        directory = args.directory or cfg[ 'central_notice_directory' ],
        file_glob = args.file_glob or cfg[ 'central_notice_file_glob' ],
        from_latest = args.from_latest,
        from_timestamp = args.from_timestamp,
        to_timestamp = args.to_timestamp
    )

    controller.execute()
