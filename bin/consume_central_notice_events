#!/usr/bin/python3

import sys
import argparse
from datetime import datetime

from fr_user_event_consumer import (
    config, setup_logging, central_notice_consumer_controller )

# Entry point
if __name__ == '__main__':

    # Set up command-line arguments
    parser = argparse.ArgumentParser(
        description =
            """Read CentralNotice event log files, aggregate them, and store them in a
            database. Log filenames must be globally unique across all logs consumed by
            fr_user_event_consumer scripts. Regardless of the options selected, events
            will only be consumed from files that have not been marked as already
            processed.
            """
    )

    parser.add_argument(
        '-d',
        '--directory',
        help =
            """Directory to read log files from. Files in sub-directories will also be
            consumed. (Defaults to the directory set in the configuration file.)"""
    )

    parser.add_argument(
        '--file-glob',
        help =
            """Filename or glob to select log file(s) with events to consume. If not
            specified, defaults to central_notice_filename_glob set in the configuration
            file. Filenames ending in '.gz' are assumed to be compressed with gzip.""",
        dest = 'file_glob'
    )

    since_grp = parser.add_mutually_exclusive_group()

    since_grp.add_argument(
        '--from-latest-consumed',
        help =
            """Process files for times from the timestamp of most recent file consumed,
            inclusive. The last file processed will be included in the list to process,
            but it will be skipped. May not be used with the --from option.""",
        action = 'store_true',
        dest = 'from_latest'
    )

    since_grp.add_argument(
        '--from',
        help =
            """Process files with a timestamp equal to or later than this timestamp
            (using the timestamp format specified in the config file). May not be used
            with the --from-latest-consumed option.""",
        dest = 'from_timestamp'
    )

    parser.add_argument(
        '--to',
        help =
            """Process files with a timestamp equal to or earlier than this timestamp
            (in the timestamp format specified in the config file).""",
        dest = 'to_timestamp'
    )

    parser.add_argument(
        '-c',
        '--config',
        help =
            """Configuration file to use. (Without this option, the script looks for a
            configuraiton file in the working directory and in
            /etc/fr_user_event_consumer/.)"""
    )

    parser.add_argument(
        '--debug',
        help = 'Output debugging info to stderr.',
        action = 'store_true'
    )

    parser.add_argument(
        '--purge-incomplete',
        help =
            """Delete from the database all data from events from files left in a state
            of incomplete processing, and delete from the database references to those
            files. This option should be used if a previous execution was interrupted.
            Before using it, the database should be backed up.""",
        dest = 'purge_incomplete',
        action = 'store_true'
    )

    args = parser.parse_args()

    # Check --purge-incomplete usage
    if args.purge_incomplete:
        if (
            ( args.directory is not None ) or
            ( args.file_glob is not None ) or
            ( args.from_latest is not False ) or
            ( args.from_timestamp is not None ) or
            ( args.to_timestamp is not None )
        ):
            parser.error(
                '--purge-incomplete: not allowed with arguments --directory, --file-glob, '
                '--from-latest, --from or --to.'
            )

    # Load config
    config.filename = args.config # Will be None if the command-line option is not set
    cfg = config.get()

    setup_logging( args.debug )

    # Parse timestamp command line arguments. This should raise an error if they're not in
    # the right format.
    timestamp_format_in_fn = cfg[ 'timestamp_format_in_filenames' ]

    if args.from_timestamp:
        from_time = datetime.strptime( args.from_timestamp, timestamp_format_in_fn )
    else:
        from_time = None

    if args.to_timestamp:
        to_time = datetime.strptime( args.to_timestamp, timestamp_format_in_fn )
    else:
        to_time = None

    if args.purge_incomplete:
        print(
            'Purge database of events from files in a state of incomplete processing, '
            'and purge records of those files. WARNING: Back up database before '
            'executing this command.'
        )

        confirm = input( 'Proceed? [y/N] ' )
        if confirm.strip() not in ( 'Y', 'y' ):
            sys.exit()

        central_notice_consumer_controller.purge_incomplete(
            db_settings = cfg[ 'db_settings' ]
        )

    else:
        stats = central_notice_consumer_controller.consume_events(
            db_settings = cfg[ 'db_settings' ],
            timestamp_format_in_filenames = timestamp_format_in_fn,
            extract_timestamp_regex = cfg[ 'extract_timestamp_regex' ],
            extract_sample_rate_regex = cfg[ 'extract_sample_rate_regex' ],
            directory = args.directory or cfg[ 'central_notice_directory' ],
            file_glob = args.file_glob or cfg[ 'central_notice_file_glob' ],
            detail_languages = cfg[ 'central_notice_detail_languages' ],
            detail_projects_regex = cfg[ 'central_notice_detail_projects_regex' ],
            from_latest = args.from_latest,
            from_time = from_time,
            to_time = to_time
        )

        print( 'Files consumed: {}'.format( stats[ 'consumed_files' ] ) )
        print( 'Files selected by options, but skipped due to previous processing: {}'
            .format( stats[ 'skipped_files' ] ) )

        print( 'Events aggregated: {}'.format( stats[ 'consumed_events' ] ) )
        print( 'Events ignored: {}'.format( stats[ 'ignored_events' ] ) )
        print( 'Invalid events: {}'.format( stats[ 'invalid_lines' ] ) )
